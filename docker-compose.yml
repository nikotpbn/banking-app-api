services:
  backend: &backend
    build:
      context: .
      args:
        - DEV=true
    command: >
      sh -c "python manage.py collectstatic --noinput && \
            python manage.py migrate && \
            python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/backend
    # ports:
    #   - 8000:8000
    expose:
      - "8000"
    environment:
      - DEBUG=true
      - SITE_NAME=NextGen Bank
      - SECRET_KEY=/run/secrets/secret_key
      - ADMIN_URL=/run/secrets/admin_url
      - EMAIL_PORT=1025
      - EMAIL_HOST=mailpit
      - DEFAULT_FROM_EMAIL=NextGen Bank <noreply@nextgenbank.com>
      - DOMAIN=localhost:8080
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=banker
      - DB_USER=dbuser
      - DB_PASS=/run/secrets/db_password
      - LOCKOUT_DURATION=1
      - OTP_EXPIRATION=1
      - BANK_NAME=NextGen Bank
      - CELERY_BROKER_URL=amqp://rabbitmq
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CLOUDINARY_CLOUD_NAME=/run/secrets/cloudinary_cloud_name
      - CLOUDINARY_API_KEY=/run/secrets/cloudinary_api_key
      - CLOUDINARY_API_SECRET=/run/secrets/cloudinary_api_secret
      - COOKIE_SECURE=False
      - SIGNING_KEY=/run/secrets/signing_key
      - BANK_CODE=211
      - BANK_BRANCH_CODE=700
      - CURRENCY_CODE_USD=01
      - CURRENCY_CODE_EUR=02
      - CURRENCY_CODE_GBP=03
      - CARD_BANK_PREFIX=4132
      - BANK_CARD_CODE=1300
      - CVV_SECRET_KEY=/run/secrets/cvv_secret_key
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true

    secrets:
      - secret_key
      - admin_url
      - db_password
      - cloudinary_api_key
      - cloudinary_api_secret
      - cloudinary_cloud_name
      - signing_key
      - cvv_secret_key

  redis:
    image: redis:8.0.2
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres
    restart: always
    shm_size: 128mb
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_USER=dbuser
      - POSTGRES_DB=banker
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dbuser", "-d", "banker"]
      interval: 30s
      timeout: 10s
      retries: 5
    secrets:
      - db_password

  mailpit:
    image: axllent/mailpit
    ports:
      - "8025:8025"
      - "1025:1025"
    volumes:
      - banker_mailpit_db:/data
    environment:
      - MP_MAX_MESSAGE=5000
      - MP_DATA_FILE=/data/mailpit.db
      - MP_SMTP_AUTH_ACCEPT_ANY=1
      - MP_SMTP_AUTH_ALLOW_INSECURE=1

  proxy:
    build: ./docker/local/proxy
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./backend/staticfiles:/backend/staticfiles
      - logs-store:/var/log/nginx
    depends_on:
      - backend

  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_log:/var/log/rabbitmq

  celeryworker:
    <<: *backend
    command: /celery_scripts/celeryworker.sh

  flower:
    <<: *backend
    ports:
      - "5555:5555"
    volumes:
      - flower_db:/backend/flower_db
    environment:
      - CELERY_FLOWER_USER=admin
      - CELERY_FLOWER_PASSWORD=pass123word
      - CELERY_BROKER_URL=amqp://rabbitmq
      - LOCKOUT_DURATION=1
      - OTP_EXPIRATION=1
      - SECRET_KEY=/run/secrets/secret_key
      - SIGNING_KEY=/run/secrets/signing_key
    command: /celery_scripts/flower.sh
    secrets:
      - signing_key
      - secret_key

  celerybeat:
    build:
      context: .
      args:
        - DEV=true
    environment:
      - LOCKOUT_DURATION=1
      - OTP_EXPIRATION=1
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=banker
      - DB_USER=dbuser
      - DB_PASS=/run/secrets/db_password
      - SIGNING_KEY=/run/secrets/signing_key
      - SECRET_KEY=/run/secrets/secret_key
      - CELERY_BROKER_URL=amqp://rabbitmq
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: /celery_scripts/celerybeat.sh
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    secrets:
      - db_password
      - signing_key
      - secret_key


secrets:
  secret_key:
    file: ./secrets/secret_key.txt
  admin_url:
    file: ./secrets/admin_url.txt
  db_password:
    file: ./secrets/db_password.txt
  cloudinary_cloud_name:
   file: ./secrets/cloudinary_cloud_name.txt
  cloudinary_api_secret:
    file: ./secrets/cloudinary_api_secret.txt
  cloudinary_api_key:
    file: ./secrets/cloudinary_api_key.txt
  signing_key:
    file: ./secrets/signing_key.txt
  cvv_secret_key:
    file: ./secrets/cvv_secret_key.txt

volumes:
  postgres_data:
  banker_mailpit_db:
  logs-store:
  rabbitmq_data:
  rabbitmq_log:
  flower_db: